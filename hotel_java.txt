
---

### 1. `HotelBooking.java`
```java
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface HotelBooking extends Remote {
    String bookRoom(String guestName, int roomNumber) throws RemoteException;
    String cancelBooking(int roomNumber) throws RemoteException;
}
```

---

### 2. `HotelServerImpl.java`
```java
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;
import java.util.Map;

public class HotelServerImpl extends UnicastRemoteObject implements HotelBooking {
    private Map<Integer, String> rooms; // Room number mapped to guest name

    protected HotelServerImpl() throws RemoteException {
        super();
        rooms = new HashMap<>();
    }

    @Override
    public synchronized String bookRoom(String guestName, int roomNumber) throws RemoteException {
        if (rooms.containsKey(roomNumber)) {
            return "Room " + roomNumber + " is already booked by " + rooms.get(roomNumber);
        }
        rooms.put(roomNumber, guestName);
        return "Room " + roomNumber + " successfully booked for " + guestName;
    }

    @Override
    public synchronized String cancelBooking(int roomNumber) throws RemoteException {
        if (!rooms.containsKey(roomNumber)) {
            return "Room " + roomNumber + " is not booked.";
        }
        String guestName = rooms.remove(roomNumber);
        return "Booking for " + guestName + " in Room " + roomNumber + " has been canceled.";
    }
}
```

---

### 3. `HotelServer.java`
```java
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class HotelServer {
    public static void main(String[] args) {
        try {
            HotelServerImpl hotelServer = new HotelServerImpl();
            Registry registry = LocateRegistry.createRegistry(1099);
            registry.rebind("HotelService", hotelServer);
            System.out.println("Hotel Booking Server is running...");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

---

### 4. `HotelClient.java`
```java
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Scanner;

public class HotelClient {
    public static void main(String[] args) {
        try {
            Registry registry = LocateRegistry.getRegistry("localhost", 1099);
            HotelBooking hotelService = (HotelBooking) registry.lookup("HotelService");

            Scanner scanner = new Scanner(System.in);

            while (true) {
                System.out.println("\nHotel Booking System:");
                System.out.println("1. Book a Room");
                System.out.println("2. Cancel a Booking");
                System.out.println("3. Exit");
                System.out.print("Choose an option: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        System.out.print("Enter guest name: ");
                        String guestName = scanner.nextLine();
                        System.out.print("Enter room number: ");
                        int roomNumber = scanner.nextInt();
                        System.out.println(hotelService.bookRoom(guestName, roomNumber));
                        break;
                    case 2:
                        System.out.print("Enter room number to cancel: ");
                        int cancelRoom = scanner.nextInt();
                        System.out.println(hotelService.cancelBooking(cancelRoom));
                        break;
                    case 3:
                        System.out.println("Exiting...");
                        scanner.close();
                        return;
                    default:
                        System.out.println("Invalid choice. Try again.");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```